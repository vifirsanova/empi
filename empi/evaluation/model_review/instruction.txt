RULES

Правило 1 «tone»: Слова, использующиеся для выражения враждебности или агрессии
Правило 2 «lexicon»: Слова с негативным подтекстом
Правило 3 «emphasis»: Слова-усиления, преувеличивают или преуменьшают количество или качество описываемого объекта или явления
Правило 4 «connotation»: Слова с отрицательной коннотацией
Правило 5 «implicature»: Импликатуры

DATA

user: Ты слышала? Иван опять устроил переполох в офисе.
system: Да что он на этот раз натворил?
user: Он пробрался в архив без разрешения. Искал какие-то старые документы по проекту.
system: Ох, опять за своё. Он не давал развиваться проекту с самого начала. Всё время чинит препятствия.
user: Точно. А помнишь, как на прошлой неделе Елена внесла лишь одно изменение в расписание, и он устроил из этого целую драму?
system: Да уж, она всегда делает не то, что нужно. Хотя в этот раз её предложение было вполне разумным.
user: Согласна. А когда Иван пытался исправить ситуацию своими "гениальными" идеями, я чуть не рассмеялась ему в лицо.
system: Ну да, твои предложения были "неоценимы", сказала я ему. Он даже не понял сарказма!
user: Боже, когда же в нашем офисе наступит спокойствие?
system: Боюсь, что не скоро, пока у нас работают такие персонажи.

BNF

<json> ::= "{" <protocol> "}"

<protocol> ::= '"Protocol": {' <rules> "," <dialogueHistory> '}'

<rules> ::= '"rules": {' <rule> {"," <rule>} '}'

<rule> ::= <tone> | <lexicon> | <emphasis> | <connotation> | <implicature>

<tone> ::= '"tone": {"violations": [' <violation> {"," <violation>} '] }'
<lexicon> ::= '"lexicon": {"violations": [' <violation> {"," <violation>} '] }'
<emphasis> ::= '"emphasis": {"violations": [' <violation> {"," <violation>} '] }'
<connotation> ::= '"connotation": {"violations": [' <violation> {"," <violation>} '] }'
<implicature> ::= '"implicature": {"violations": [' <violation> {"," <violation>} '] }'

<violation> ::= '{ "line": <number>, "issue": <string>, "details": <details> }' 
              | '{ "issue": <string> }'

<details> ::= '{ "lexical_item": <string>, "position": { "start": <number>, "end": <number> } }'

<dialogueHistory> ::= '"dialogueHistory": [' <dialogueLine> {"," <dialogueLine>} ']'

<dialogueLine> ::= '{ "timestamp": <string>, "speaker": <string>, "message": <string> }'

<number> ::= <digit> {<digit>}
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<string> ::= '"' {<character>} '"'
<character> ::= any valid JSON string character

INSTRUCTION: build json based on bnf
